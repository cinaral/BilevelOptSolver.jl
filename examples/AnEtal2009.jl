using BilevelOptSolver

# AnEtal2009
n₁::Int64 = 2
n₂::Int64 = 2

function F(x)
    x₁ = @view x[1:n₁]
    x₂ = @view x[n₁+1:n₁+n₂]
    x₂[1] * ((3 * x₁[1]) / 5 + (3 * x₁[2]) / 10 + x₂[2] / 5 + 4291154981323245 / 35184372088832) + x₂[2] * ((9 * x₁[2]) / 10 - (11 * x₁[1]) / 10 + x₂[1] / 5 + 2632215443732955 / 8796093022208) + x₁[2] * ((11 * x₁[1]) / 5 - (11 * x₁[2]) / 10 + (3 * x₂[1]) / 10 + (9 * x₂[2]) / 10 + 1539959097364463 / 17592186044416) + x₁[1] * ((11 * x₁[2]) / 5 - (19 * x₁[1]) / 10 + (3 * x₂[1]) / 5 - (11 * x₂[2]) / 10 + 8230897778081839 / 8796093022208)
end

function G(x)
    x₁ = @view x[1:n₁]
    x₂ = @view x[n₁+1:n₁+n₂]
    [
        x₁[1]
        x₁[2]
        x₂[1]
        x₂[2]
        8666302095696949 / 140737488355328 - (1376100198890959 * x₂[1]) / 281474976710656 - (523855893905969 * x₂[2]) / 70368744177664 - (1094625222180303 * x₁[2]) / 281474976710656; 2 * x₁[1] - (1235362710535631 * x₁[2]) / 140737488355328 + (1438649568215601 * x₂[1]) / 281474976710656 - (88889 * x₂[2]) / 100000 + 4 / 5
    ]
end

function f(x)
    x₁ = @view x[1:n₁]
    x₂ = @view x[n₁+1:n₁+n₂]
    (x₂[2] * ((1663000605777713 * x₂[1]) / 140737488355328 - (8134052617985469 * x₂[2]) / 562949953421312)) / 2 + x₂[2] * ((1213 * x₁[1]) / 40 + (1213 * x₁[2]) / 40 + 1836994362631405 / 140737488355328) - x₂[1] * ((357 * x₁[1]) / 20 - (263 * x₁[2]) / 40 + 2562904253819351 / 140737488355328) + (x₂[1] * ((5939696217547331 * x₂[1]) / 281474976710656 + (1663000605777713 * x₂[2]) / 140737488355328)) / 2
end

function g(x)
    x₁ = @view x[1:n₁]
    x₂ = @view x[n₁+1:n₁+n₂]
    [
        1394082931465561 / 35184372088832 - (523855893905969 * x₁[2]) / 70368744177664 - (1094625222180303 * x₂[1]) / 281474976710656 - (88889 * x₂[2]) / 50000 - 5 * x₁[1]; (2345623867672211 * x₁[1]) / 281474976710656 - 3 * x₁[2] - (1939050152312271 * x₂[1]) / 281474976710656 - (1720124544926257 * x₂[2]) / 281474976710656 + 60; (2439450736408941 * x₁[1]) / 281474976710656 + (602044012936655 * x₁[2]) / 70368744177664 + (1501198937540243 * x₂[1]) / 281474976710656 + 7 * x₂[2] - 2546566742483623 / 35184372088832;
        (1438649568215601 * x₁[2]) / 281474976710656 - (453487149728305 * x₁[1]) / 70368744177664 - (36111 * x₂[1]) / 25000 - (312749661372977 * x₂[2]) / 70368744177664 + 4866389910103093 / 281474976710656
    ]
end

x_init = [1.0; 1; 1; 1]
Ff_optimal = [2251.55; 565.78]

bop = construct_bop(n₁, n₂, F, G, f, g);
x, is_success, iter_count = solve_bop(bop; x_init, verbosity=2)

if is_success
    Ff = [bop.F(x); bop.f(x)]
    @assert isapprox(Ff_optimal, Ff; rtol=1e-6)
    @info "success x = $x, Ff val = $Ff"
end